{% verbatim %}

    <!-- template for rendering all posts -->
    <script id="posts-skeleton-template" type="text/template">

        {{#posts}}
            <div id="PostContainer_{{ postId }}" class="post" style="clear: both;">
                
            </div>
        {{/posts}}

        <div id="NewPostFormContainer" class="post">
            
        </div>

    </script>

    <!-- template for rendering a single post -->
    <script id="post-template" type="text/template">

        <div id="Post_{{ post.postId }}" class="postContainer">
            <div>
                <span class="poster">{{ post.poster }}</span> <span class="message">{{ post.message }}</span>
            </div>
            <div>
                <span class="postDate">{{ post.postDate }}</span>
                {{#editable}}
                <span id="EditLink_{{ post.postId }}" class="postEditLink">Edit</span>
                {{/editable}}
            </div>
        </div>

    </script>

    <!-- template for rendering when there are no posts yet -->
    <script id="no-posts-template" type="text/template">

        <p>There are no comments yet, be the first to write one!</p>

        <div id="NewPostFormContainer" class="post">
            
        </div>

    </script>

    <!-- template for rendering when there was some error fetching posts -->
    <script id="error-posts-template" type="text/template">

        <p>We are sorry but there was a problem fetching comments.</p>

    </script>

    <!-- template for rendering a form for creating or editing a post -->
    <script id="post-form-template" type="text/template">

        <div id="postform_{{ containerId }}" class="">
            <textarea id="textarea_{{ containerId }}" class="ForumTextArea"
                placeholder="Write a comment ..." style="width: 100%;">{{ value }}</textarea>
            <div style="float: left;">
                <p style="font-size: 80%;">(press escape to cancel, enter to save)</p>
            </div>
            <div style="float: right;">
                <p id="length_{{ containerId }}" style="font-size: 80%;">0/0</p>
            </div>
        </div>

    </script>

{% endverbatim %}

<script>

var MAX_POST_LENGTH = 250;

var topicModel;
var topicController;

$(document).ready(function()
{
    topicModel = new TopicModel('{{ event.topicId }}');

    topicController = new TopicController(topicModel);

    topicController.refreshPosts();
});

function postClicked(postId)
{
    var template = $('#edit-post-template').html();

    var view = {
        containerId: 'EditPost_' + postId,
        value: 'A value that should come from a data structure',
        callbackFunction: 'submitNewPost',
        callbackValue: postId
    };

    var html = Mustache.to_html(template, view);

    var textAreaId = 'EditPost_' + postId + '_textarea';

    $('#Post_' + postId).replaceWith(html);

    $('#' + textAreaId).focus();

    $('#' + textAreaId).keydown(function (e)
    {
        if (e.keyCode == 27)
        {
            refreshPosts();
        }
        else if (e.keyCode == 10 || e.keyCode == 13)
        {
            e.preventDefault();

            refreshPosts();
        }
    });
}

function renderTemplate(templateRef, parentRef, data)
{
    var template = $(templateRef).html();

    var html = Mustache.to_html(template, data);

    $(parentRef).html(html);   
}

function randomString(len, charSet) 
{
    charSet = charSet || 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
    
    var randomString = '';
    
    for (var i = 0; i < len; i++) 
    {
        var randomPoz = Math.floor(Math.random() * charSet.length);
        randomString += charSet.substring(randomPoz,randomPoz+1);
    }

    return randomString;
}

/*
 * TopicController
 *
 */

function TopicController(topicModel)
{
    this.topicModel = topicModel;

    this.currentEditPostId = null;
    this.currentPostFormController = null;
}

TopicController.prototype.reset = function()
{
    $('#TopicContainer').html('');
}

TopicController.prototype.refreshPosts = function()
{
    var obj = this;
    topicModel.fetchPosts(
        function()
        {
            obj.reset();

            obj.renderTopic();
        },
        function()
        {
            obj.reset();

            obj.renderError();
        }
    );
}

TopicController.prototype.renderTopic = function()
{
    var numPosts = this.topicModel.getPosts().length;

    if (numPosts === 0)
    {
        this.renderNoPosts();
    }
    else
    {
        this.renderPosts();
    }

    this.renderNewPostForm();
}

TopicController.prototype.renderNoPosts = function()
{
    renderTemplate('#no-posts-template', '#TopicContainer', null);
}

TopicController.prototype.renderPosts = function()
{
    var posts = this.topicModel.getPosts();

    var view = {
        posts: posts
    };

    renderTemplate('#posts-skeleton-template', '#TopicContainer', view);

    for (var i = 0; i < posts.length; i++)
    {
        this.renderPost(posts[i]);
    }
}

TopicController.prototype.renderPost = function(post)
{
    var postId = post.postId;

    var postController = new PostController(post);

    var renderContext = new RenderContext($("#PostContainer_" + postId));

    var obj = this;
    postController.onClick(function(){obj.postClicked(postId);});

    postController.render(renderContext);
}

TopicController.prototype.renderNewPostForm = function()
{
    this.newPostController = new PostFormController('');

    var renderContext = new RenderContext($('#NewPostFormContainer'));

    var obj = this;
    this.newPostController.registerCallbacks(
        function(){obj.newPostFormReset();}, 
        function(){obj.newPostFormEnter();});

    this.newPostController.render(renderContext);
}

TopicController.prototype.newPostFormReset = function()
{
    if (this.newPostController)
    {
        this.newPostController.reset();
    }
}

TopicController.prototype.newPostFormEnter = function()
{
    if (this.newPostController)
    {
        var obj = this;
        topicModel.addPost(this.newPostController.getValue(), 
            function() { alertify.success('Comment posted'); obj.refreshPosts(); },
                function() { alertify.error('Error posting comment'); obj.refreshPosts(); });
    }
}

TopicController.prototype.renderError = function()
{
    renderTemplate('#error-posts-template', '#TopicContainer', null);
}

TopicController.prototype.postClicked = function(postId)
{
    if (this.currentEditPostId)
    {
        this.resetPostEdit();
    }

    var post = topicModel.getPost(postId);

    this.currentEditPostId = postId;
    this.currentPostFormController = new PostFormController(post.message);

    var obj = this;
    this.currentPostFormController.registerCallbacks(
        function()
        {
            obj.resetPostEdit();

            obj.renderPost(topicModel.getPost(postId));            
        }, 
        function()
        {
            topicModel.updatePost(obj.currentEditPostId, 
                obj.currentPostFormController.getValue(),
                function() { alertify.success('Comment updated'); obj.refreshPosts(); },
                function() { alertify.error('Error updating comment');obj.refreshPosts(); });
        }
    );

    this.newPostController.hide();

    var renderContext = new RenderContext($("#PostContainer_" + postId));
    this.currentPostFormController.render(renderContext);
}

TopicController.prototype.resetPostEdit = function()
{
    if (this.currentEditPostId)
    {
        this.renderPost(topicModel.getPost(this.currentEditPostId));

        this.currentEditPostId = null;
        this.currentPostFormController = null;

        this.newPostController.show();
    }
}

/*
 * PostController
 *
 */

function PostController(post)
{
    this.post = post;
    this.onClickCallback = null;
}

PostController.prototype.onClick = function(callback)
{
    this.onClickCallback = callback;
}

PostController.prototype.render = function(renderContext)
{
    var editable = false;

    editable = (currentAccount.id === this.post.posterId);

    var view = {
        post: this.post,
        editable: editable
    };

    var template = $('#post-template').html();

    var html = Mustache.to_html(template, view);

    renderContext.render(html);

    if (editable)
    {
        var obj = this;
        $('#EditLink_' + this.post.postId).click(function(){obj.postClicked();});
    }  
}

PostController.prototype.postClicked = function()
{
    if (this.onClickCallback)
    {
        this.onClickCallback();
    }
}

/*
 * PostFormController
 *
 */

function PostFormController(initialValue)
{
    this.id = randomString(10);
    this.initialValue = initialValue;

    this.callbackEscape = null;
    this.callbackEnter = null;
}

PostFormController.prototype.reset = function()
{
    this.getTextArea().val(this.initialValue);
}

PostFormController.prototype.hide = function()
{
    $('#postform_' + this.id).hide();
}

PostFormController.prototype.show = function()
{
    $('#postform_' + this.id).show();
}

PostFormController.prototype.getValue = function()
{
    return this.getTextArea().val();
}

PostFormController.prototype.registerCallbacks = function(callbackEscape, callbackEnter)
{
    this.callbackEscape = callbackEscape;
    this.callbackEnter = callbackEnter;
}

PostFormController.prototype.render = function(renderContext)
{
    var view = {
        containerId: this.id,
        value: this.initialValue
    };

    var template = $('#post-form-template').html();

    var html = Mustache.to_html(template, view);

    renderContext.render(html);

    this.updateSize();

    this.getTextArea().autoresize(
        {
            minHeight: 30
        }
    );

    this.getTextArea().focus();

    var obj = this;
    this.getTextArea().keydown(function (e)
    {
        if (e.keyCode == 27)
        {
            if (obj.callbackEscape) { obj.callbackEscape(); }
        }
        else if (e.keyCode == 10 || e.keyCode == 13)
        {
            e.preventDefault();

            if (obj.isTooLarge())
            {
                alertify.error('Hold it Shakespeare, a bit shorter please!');
            }

            if (obj.callbackEnter && !obj.isTooLarge()) { obj.callbackEnter(); }
        }

        setTimeout(function()
        {
            obj.updateSize();
        });
    });
}

PostFormController.prototype.updateSize = function()
{
    var textLength = this.getTextArea().val().length;

    $('#length_' + this.id).html(textLength + '/' + MAX_POST_LENGTH);

    if (textLength > MAX_POST_LENGTH)
    {
        $('#postform_' + this.id).addClass('TextTooLong');
    }
    else
    {
        $('#postform_' + this.id).removeClass('TextTooLong');
    }
}

PostFormController.prototype.isTooLarge = function()
{
    var textLength = this.getTextArea().val().length;

    return textLength > MAX_POST_LENGTH;
}

PostFormController.prototype.getTextArea = function()
{
     return $('#textarea_' + this.id);
}

/*
 * TopicModel
 *
 */

function TopicModel(topicId)
{
    this.topicId = topicId;

    this.updateDateTimes = function()
    {
        for (var i = 0; i < this.posts.length; i++)
        {
            var momentDate = moment(this.posts[i].postDate);

            this.posts[i].postDate = momentDate.format("ddd MMM Do YYYY - HH:mm");
        }
    };
}

TopicModel.prototype.fetchPosts = function(successCallback, failCallback)
{
    var topicThis = this;

    var postsServiceURL = '../services/forum/topics/' + this.topicId;

    $.when($.ajax({
        type: "GET",
        url: postsServiceURL,
        contentType: "application/json; charset=utf-8",
        dataType: "json"
    })).then(
        function(data, textStatus, jqXHR)
        {
            topicThis.posts = data.posts;

            if (topicThis.posts.length > 0)
            {
                topicThis.updateDateTimes();
            }

            successCallback();
        }, 
        function(jqXHR, textStatus, errorThrown)
        {
            console.log("Error fetching topic comments " + textStatus);
            console.log(errorThrown);

            topicThis.posts = null;

            failCallback();
        }
    );
};

TopicModel.prototype.getPost = function(postId)
{
    for (var i = 0; i < this.posts.length; i++)
    {
        if (this.posts[i].postId === postId)
        {
            return this.posts[i];
        }
    }

    return null;
}

TopicModel.prototype.addPost = function(message, successCallback, failCallback)
{
    if (!message || !message.trim())
    {
        return;
    }

    var postUrl = '../services/forum/topics/' + this.topicId + '/posts';

    var postData = {
        message: message
    };

    postDataString = JSON.stringify(postData); 

    $.post(postUrl, postDataString, 
        function(data, textStatus, jqXHR)
        {
            if (successCallback) { successCallback(); }
        })
    .fail(function()
    {
        if (failCallback) { failCallback(); }
    });
};

TopicModel.prototype.updatePost = function(postId, message, successCallback, failCallback)
{
    var postUrl = '../services/forum/posts/' + postId;

    var postData = {
        message: message
    };

    postDataString = JSON.stringify(postData); 

    $.post(postUrl, postDataString, 
        function(data, textStatus, jqXHR)
        {
            successCallback();
        })
    .done(function()
    {
    })
    .fail(function()
    {
        failCallback();
    });
};

TopicModel.prototype.getPosts = function()
{
    return this.posts;
};

/*
 * RenderContext
 *
 */

function RenderContext(wrapperElem)
{
    this.wrapperElem = wrapperElem;
}

RenderContext.prototype.render = function(content)
{
    this.wrapperElem.html(content);
};

</script>